一:Facade pattern
為一個複雜子系統提供一個簡單的接口 提高子系統的獨立性
Examples 
如果將銀行做為一個子系統 系統可以劃分提錢、存錢、一般業務、郵政等等眾多需求，為了分辨需求，於是有了櫃台人員，在由櫃台人員去執行需求


二:Decorator pattern
不採取繼承的方式，而以組合的方式動態地為物件添加功能。
Examples:
例如強化一件武器(物件) 添加了許多強化功能(抽象裝飾者類) 如強化 加長 變硬  發光 傳說等等。

三:Bridge patten
將一個物件的具體行為抽出來，成為一個獨立的物件。
也就是原本的一個物件，變成兩個物件：抽像物件+實作物件。
例如製作一個籃球  要把籃球的形狀跟製做出籃球  這兩件事情分開

四:Adapter patten
轉接器
例如:gameboy的卡帶透過轉接器轉接後，可以在手機上遊玩


五:Singleton patten
獨體模式確保一個類別只有一個實體

例如:在桌球遊戲中，在場上的有效球只能有一顆


六:Prototype
有些物件若以標準的方式建立實例，或者是設定至某個狀態需要複雜的運算及昂貴的資源，則您可以考慮直接以某個物件作為原型，在需要個別該物件時，複製原型並傳回。
Examples:
例如 冰水的取得需要透過自來水->飲水機->煮沸->冷卻->取得水->放冰箱->冰水  等多總動作，
則下次在需要冰水時則直接Clone冰水過去  省去多種流程



七:Factory
將相同的功能上生,在由子類別去生產個品
例如:棒球投球有變化球 伸卡球等多種球路，將"把球投出"這件事提出來，
在由子類別"力道""握法""角度"等  投出球，形成不同的球路

八:Observer Pattern
觀察者模式定義了物件之間的一對多關係，如此一來，當一個物件改變狀態，其他相依者都會收到通知並自動被更新
例如:一個實況主不管是關台還是開台玩遊戲唱歌，底下的收看者都會知道訊息


九:Interpreter
用來解釋、直譯一種語言的方法。將待解釋的字串交給合適的解譯器處理。

例如:兩人穿婚紗禮服出現在結婚會場會被解讀成主婚人
     學校在畢業典禮時(編譯器)，學生胸前別花(行為)的為畢業生(解釋)


十:Command 
Command Pattern其實就是封裝請求，然後進行一系列的參數化或操作
例如:手機設鬧鈴有鈴聲  震動  螢幕顯示三種功能
     將它細分為發命令物件(開關)  命令物件(鈴聲震動無聲)  執行物件(程式)

十一:Design Pattern 
Design Pattern在某些情況下，你可以如何用某些方式組合函式與物件之間的關係，並且給了這些關係特定的名字，
讓在日復一日的開發工作中，在遇到某些類似的時機可以用上，而且提供了一套現成的詞彙，方便說明做了什麼，或是打算怎麼做某個東西。
